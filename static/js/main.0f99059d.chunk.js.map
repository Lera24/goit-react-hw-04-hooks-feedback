{"version":3,"sources":["components/Statistics/Statistics.styled.js","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.styled.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.styled.js","components/Section/Section.js","components/Notification/Notification.js","App.styled.js","App.js","reportWebVitals.js","index.js"],"names":["Item","styled","li","Statistics","good","neutral","bad","total","positivePercentage","Button","button","List","ul","FeedbackOptions","options","onLeaveFeedback","map","option","type","name","onClick","Title","h1","Section","title","children","Notification","Wrap","div","App","useState","goodRating","setGoodRating","neutralRating","setNeutralRating","badRating","setBadRating","countTotalFeedback","prevState","positiveFeedback","Number","parseInt","isNaN","countPositiveFeedbackPercentage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAEaA,EAAOC,IAAOC,GAAV,mD,OCCF,SAASC,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IACAC,EAEC,EAFDA,MACAC,EACC,EADDA,mBAEA,OACE,8BACE,+BACE,cAACR,EAAD,UACE,0CAAaI,OAEf,cAACJ,EAAD,UACE,6CAAgBK,OAElB,cAACL,EAAD,UACE,yCAAYM,OAEd,cAACN,EAAD,UACE,2CAAcO,OAEhB,cAACP,EAAD,UACE,uDAA0BQ,YCxB7B,I,EAAMC,EAASR,IAAOS,OAAV,qPAWNC,EAAOV,IAAOW,GAAV,8CAIJZ,EAAOC,IAAOC,GAAV,mDCdF,SAASW,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBACjD,OACE,cAACJ,EAAD,UACGG,EAAQE,KAAI,SAACC,GACZ,OACE,cAAC,EAAD,UACE,cAACR,EAAD,CACES,KAAK,SACLC,KAAMF,EACNG,QAAS,kBAAML,EAAgBE,IAHjC,SAKGA,KANMA,QCNrB,I,EAKeI,EALDpB,IAAOqB,GAAV,wECCI,SAASC,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,gCACE,cAAC,EAAD,UAAQD,IACPC,KCPQ,SAASC,IACtB,OAAO,4BAAI,sBCCb,IAIeC,EAJF1B,IAAO2B,IAAV,mD,MCSK,SAASC,IACtB,MAAoCC,mBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA0CF,mBAAS,GAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAAkCJ,mBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KAsBMC,EAAqB,kBAAMN,EAAaE,EAAgBE,GAS9D,OACE,eAAC,EAAD,WACE,cAACZ,EAAD,CAASC,MAAM,wBAAf,SACE,cAACX,EAAD,CACEC,QAlCY,CAAC,OAAQ,UAAW,OAmChCC,gBAjCe,SAACI,GACtB,OAAQA,GACN,IAAK,OACHa,GAAc,SAACM,GAAD,OAAeA,EAAY,KACzC,MAEF,IAAK,UACHJ,GAAiB,SAACI,GAAD,OAAeA,EAAY,KAC5C,MAEF,IAAK,MACHF,GAAa,SAACE,GAAD,OAAeA,EAAY,KACxC,MAEF,QACE,aAqBF,cAACf,EAAD,CAASC,MAAM,aAAf,SAC4B,IAAzBa,IACC,cAACX,EAAD,IAEA,cAACvB,EAAD,CACEC,KAAM2B,EACN1B,QAAS4B,EACT3B,IAAK6B,EACL5B,MAAO8B,IACP7B,mBAxB8B,WACtC,IAAM+B,EAAmBC,OAAOC,SAChB,IAAbV,GAAqBA,EAAaE,EAAgBE,IAErD,OAAOO,MAAMH,GAAoB,EAA1B,UAAiCA,EAAjC,MAoBqBI,UC9DhC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.0f99059d.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const Item = styled.li`\n  margin-bottom: 5px;\n`;\n","import PropTypes from \"prop-types\";\nimport { Item } from \"./Statistics.styled\";\n\nexport default function Statistics({\n  good,\n  neutral,\n  bad,\n  total,\n  positivePercentage,\n}) {\n  return (\n    <div>\n      <ul>\n        <Item>\n          <span>Good: {good}</span>\n        </Item>\n        <Item>\n          <span>Neutral: {neutral}</span>\n        </Item>\n        <Item>\n          <span>Bad: {bad}</span>\n        </Item>\n        <Item>\n          <span>Total: {total}</span>\n        </Item>\n        <Item>\n          <span>Positive feedback: {positivePercentage}</span>\n        </Item>\n      </ul>\n    </div>\n  );\n}\n\nStatistics.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  positivePercentage: PropTypes.string,\n};\n","import styled from \"@emotion/styled\";\n\nexport const Button = styled.button`\n  background-color: inherit;\n  border: 1px solid rgb(133, 133, 133);\n  border-radius: 20px;\n  &:hover {\n    cursor: pointer;\n    background-color: rgb(173, 216, 230);\n    border-color: rgb(173, 216, 230);\n  }\n`;\n\nexport const List = styled.ul`\n  display: flex;\n`;\n\nexport const Item = styled.li`\n  margin-right: 10px;\n`;\n","import { Button, List, Item } from \"./FeedbackOptions.styled\";\nimport PropTypes from \"prop-types\";\n\nexport default function FeedbackOptions({ options, onLeaveFeedback }) {\n  return (\n    <List>\n      {options.map((option) => {\n        return (\n          <Item key={option}>\n            <Button\n              type=\"button\"\n              name={option}\n              onClick={() => onLeaveFeedback(option)}\n            >\n              {option}\n            </Button>\n          </Item>\n        );\n      })}\n    </List>\n  );\n}\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.array,\n  onLeaveFeedback: PropTypes.func,\n};\n","import styled from \"@emotion/styled\";\n\nconst Title = styled.h1`\n  font-size: 24px;\n  font-weight: normal;\n`;\n\nexport default Title;\n","import PropTypes from \"prop-types\";\nimport Title from \"./Section.styled\";\n\nexport default function Section({ title, children }) {\n  return (\n    <div>\n      <Title>{title}</Title>\n      {children}\n    </div>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.object,\n};\n","export default function Notification() {\n  return <p>{\"No feedback given\"}</p>;\n}\n","import styled from \"@emotion/styled\";\n\nconst Wrap = styled.div`\n  padding-left: 20px;\n`;\n\nexport default Wrap;\n","import { useState } from \"react\";\n\nimport Statistics from \"./components/Statistics/Statistics\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\nimport Section from \"./components/Section/Section\";\nimport Notification from \"./components/Notification/Notification\";\n\nimport Wrap from \"./App.styled\";\nimport \"./index.css\";\nimport \"./App.css\";\n\nexport default function App() {\n  const [goodRating, setGoodRating] = useState(0);\n  const [neutralRating, setNeutralRating] = useState(0);\n  const [badRating, setBadRating] = useState(0);\n  const nameButtons = [\"good\", \"neutral\", \"bad\"];\n\n  const changeFeedback = (name) => {\n    switch (name) {\n      case \"good\":\n        setGoodRating((prevState) => prevState + 1);\n        break;\n\n      case \"neutral\":\n        setNeutralRating((prevState) => prevState + 1);\n        break;\n\n      case \"bad\":\n        setBadRating((prevState) => prevState + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => goodRating + neutralRating + badRating;\n\n  const countPositiveFeedbackPercentage = () => {\n    const positiveFeedback = Number.parseInt(\n      (goodRating * 100) / (goodRating + neutralRating + badRating)\n    );\n    return isNaN(positiveFeedback) ? 0 : `${positiveFeedback} %`;\n  };\n\n  return (\n    <Wrap>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={nameButtons}\n          onLeaveFeedback={changeFeedback}\n        />\n      </Section>\n      <Section title=\"Statistics\">\n        {countTotalFeedback() === 0 ? (\n          <Notification />\n        ) : (\n          <Statistics\n            good={goodRating}\n            neutral={neutralRating}\n            bad={badRating}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          />\n        )}\n      </Section>\n    </Wrap>\n  );\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}